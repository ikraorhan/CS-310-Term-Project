rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Basic function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if the authenticated user is the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if a timestamp is valid
    function isValidTimestamp(timeValue) {
      return timeValue is timestamp;
    }
    
    // Check if required fields exist in the request for tasks
    function hasRequiredTaskFields() {
      let requiredFields = ['title', 'userId', 'date', 'isCompleted'];
      let allowedFields = ['description', 'createdAt', 'priority'];
      
      return requiredFields.hasAll(request.resource.data.keys) && 
             request.resource.data.keys.hasOnly(requiredFields.concat(allowedFields)) &&
             request.resource.data.title is string &&
             request.resource.data.userId is string &&
             request.resource.data.isCompleted is bool;
    }
    
    // Tasks collection rules
    match /tasks/{taskId} {
      // Allow reading only tasks owned by the authenticated user
      allow read: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
      
      // Allow creating tasks with less restrictive rules
      allow create: if isAuthenticated() && 
                     request.resource.data.userId == request.auth.uid;
      
      // Allow updating only their own tasks
      allow update: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      
      // Allow deletion only of their own tasks
      allow delete: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
    }
    
    // Users collection rules
    match /users/{userId} {
      // Allow reading user document to anyone (needed for login)
      allow read: if true; 
      
      // Allow any authenticated user to create their own document 
      // Without restrictions during registration
      allow create: if request.auth.uid == userId;
      
      // Allow updates only to their own profile
      allow update: if isOwner(userId);
      
      // No deletion of user profiles allowed
      allow delete: if false;
    }
    
    // Special rule to allow username lookup for login
    match /users/{userId} {
      // Allow reading usernames and emails for authentication purposes
      allow list: if request.query.limit <= 1 && 
                   request.query.filters.size() >= 1 &&
                   ('username' in request.query.filters[0] || 'email' in request.query.filters[0]);
    }
    
    // Deny access to all other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 
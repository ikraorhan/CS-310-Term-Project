rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Basic function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if the authenticated user is the owner of the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check file metadata and size
    function isValidImage(size) {
      return request.resource.size <= size * 1024 * 1024 // Max size in MB
             && request.resource.contentType.matches('image/.*');
    }
    
    // Default rule - deny all access
    match /{allPaths=**} {
      allow read, write: if false;
    }
    
    // Profile pictures
    match /profile_pictures/{userId}/{fileName} {
      // Allow users to read any profile picture
      allow read: if isAuthenticated();
      
      // Allow users to write only to their own profile picture folder
      // and only valid image files up to 5MB
      allow create, update: if isOwner(userId) && isValidImage(5);
      
      // Allow users to delete only their own profile pictures
      allow delete: if isOwner(userId);
    }
    
    // Task attachments if needed in the future
    match /task_attachments/{taskId}/{fileName} {
      // This rule assumes task ownership verification happens in the app code
      // before uploading attachments, or that there's a separate validation
      allow read, write: if isAuthenticated();
    }
  }
} 